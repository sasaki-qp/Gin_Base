並行処理: Concurrency
1, 複数個のスレッドを共通の期間内で実行する能力のこと
2, 複数の処理を独立して実行できる

並列処理: Parallelism
1, 複数個のスレッドを同時に実行する能力のこと
2, 複数の処理を同時に実行できる

並行処理 基礎
大前提: メインゴールーチンが終われば他のゴールーチンの終了を待たずに処理を終了する

構造体を使用した使用方法
var struct sync.WaitGroup: 構造体作成
struct.Add(x): 構造体のカウンターをx分増やす
defer struct.Done(): カウンターを-1する
struct.Wait(): カウンターが0になるまで待つ

チャネルを使用した作成方法

channel(チャネル)
特定の型の値を送受信することで異なるゴールーチンで並行に実行している関数がやりとりする機能

メインゴールーチン → メインはチャネルが値を送信するまでブロックされるのでチャネルの値の送信を待たずにプログラムが終了することはない
main() {
	c := make(chan int): チャネル作成
	go Sub(c): チャネルcを引数にサブゴールーチンを起動
	var seconds int = <-c: チャネルcに格納されている値を取り出す
	close(c): チャネルをクローズする
}
サブゴールーチン
func sub(c chan <- int) {
	c <- 100: チャネルcに値を送信
}



